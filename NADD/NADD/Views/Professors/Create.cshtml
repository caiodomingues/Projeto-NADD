@model NADD.Models.Professor

@{
    ViewData["Title"] = "Create";
}
</script>
<h2>Create</h2>

<h4>Professor</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group col-md-3">
                <label asp-for="NomeProfessor" class="control-label"> Nome do Professor (a)</label>
                <input asp-for="NomeProfessor" class="form-control" />
                <span asp-validation-for="NomeProfessor" class="text-danger"></span>
            </div>
            <div class="form-group col-md-3">
                <label asp-for="EmailProfessor" class="control-label" typeof="email">E-mail</label>
                <input asp-for="EmailProfessor" class="form-control" />
                <span asp-validation-for="EmailProfessor" class="text-danger"></span>
            </div>
            <div class="form-group col-md-3">
                <label asp-for="TelProfessor" class="control-label" id="telefone" onKeyUp="formataData(this)">Telefone</label>
                <input asp-for="TelProfessor" class="form-control phone_with_ddd" />
                <span asp-validation-for="TelProfessor" class="text-danger"></span>
            </div>
            <div class="form-group col-md-12">
                <a asp-action="Index" class="col-md-2 btn btn-primary">Voltar</a>
                <div class="col-md-8"></div>
                <input type="submit" value="Criar" class="btn btn-success col-md-2" />
            </div>
        </form>
    </div>
</div>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script type="text/javascript">
    function formataData(val) {

        var pass = val.value;
        var expr = /[0123456789]/;

        for (i = 0; i < pass.length; i++) {
            // charAt -> retorna o caractere posicionado no índice especificado
            var lchar = val.value.charAt(i);
            var nchar = val.value.charAt(i + 1);

            if (i == 0) {
                // search -> retorna um valor inteiro, indicando a posição do inicio da primeira
                // ocorrência de expReg dentro de instStr. Se nenhuma ocorrencia for encontrada o método retornara -1
                // instStr.search(expReg);
                if ((lchar.search(expr) != 0) || (lchar > 3)) {
                    val.value = "";
                }

            } else if (i == 1) {

                if (lchar.search(expr) != 0) {
                    // substring(indice1,indice2)
                    // indice1, indice2 -> será usado para delimitar a string
                    var tst1 = val.value.substring(0, (i));
                    val.value = tst1;
                    continue;
                }

                if ((nchar != '/') && (nchar != '')) {
                    var tst1 = val.value.substring(0, (i) + 1);

                    if (nchar.search(expr) != 0)
                        var tst2 = val.value.substring(i + 2, pass.length);
                    else
                        var tst2 = val.value.substring(i + 1, pass.length);

                    val.value = tst1 + '/' + tst2;
                }

            } else if (i == 4) {

                if (lchar.search(expr) != 0) {
                    var tst1 = val.value.substring(0, (i));
                    val.value = tst1;
                    continue;
                }

                if ((nchar != '/') && (nchar != '')) {
                    var tst1 = val.value.substring(0, (i) + 1);

                    if (nchar.search(expr) != 0)
                        var tst2 = val.value.substring(i + 2, pass.length);
                    else
                        var tst2 = val.value.substring(i + 1, pass.length);

                    val.value = tst1 + '/' + tst2;
                }
            }

            if (i >= 6) {
                if (lchar.search(expr) != 0) {
                    var tst1 = val.value.substring(0, (i));
                    val.value = tst1;
                }
            }
        }

        if (pass.length > 10)
            val.value = val.value.substring(0, 10);
        return true;
    }
</script>

